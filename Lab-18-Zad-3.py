from timer import Timer
t = Timer()
t.start()

class Queue:
   def __init__(self):
       self.s1 = []
       self.s2 = []

   def enQueue(self, x):

       while len(self.s1) != 0:
           self.s2.append(self.s1[-1])
           self.s1.pop()

       self.s1.append(x)

       while len(self.s2) != 0:
           self.s1.append(self.s2[-1])
           self.s2.pop()

   def deQueue(self):

       if len(self.s1) == 0:
           print("Q is Empty")

       x = self.s1[-1]
       self.s1.pop()
       return x


# Driver code
if __name__ == '__main__':
   q = Queue()
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)
   q.enQueue(1)
   q.enQueue(2)
   q.enQueue(3)
   q.enQueue(4)
   q.enQueue(5)

t.stop()

# przy zwiekszaniu ilosci liczb 50 - 100 -150 czas caly czas rosnie, przy uzywaniu liczb z pliku czas oczywiscie jeszcze bardziej sie wydluzy. na potrzeby zadania utworzylem plik czas.txt

# biblioteka timer.py znaleziona na githubie lekko zmodyfikowana: